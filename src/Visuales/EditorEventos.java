/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Visuales;

import Base_de_Datos.Gestion;
import clases.Evento;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import utiles.Secuencias_cadenas;
import static utiles.Secuencias_cadenas.sonNumeros;
import utiles.AbstractFrame;
import utiles.InputDialog;
import utiles.ConfirmDialog;

/**
 *
 * @author joanmanuel
 */
public class EditorEventos extends AbstractFrame {

    private Vector<String> NombreEventos;
    private Gestion g;

    public EditorEventos() {
        initComponents();
        g = new Gestion();
        NombreEventos = g.obtener_nombres_eventos();
        actualizarTabla(NombreEventos);

        Vector<String> dimensiones = g.obtenerDimensiones();

        for (int i = 0; i < dimensiones.size(); i++) {
            dimensionesComboBox.addItem(dimensiones.elementAt(i));
        }
        nuevoEvento.setEnabled(false);
        jCalendar1.setEnabled(false);
        dimensionesL.setEnabled(false);
        dimensionesComboBox.setEnabled(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Editor de Evento");
        this.setResizable(false);
    }
    
    
    @Override
    public void inputDialog_devolverValor(Object O, int seleccion){
        if(seleccion == 1){
            if (O.equals(false)) {
            TableEventos.clearSelection();
            jCalendar1.setEnabled(false);
            dimensionesL.setEnabled(false);
            dimensionesComboBox.setEnabled(false);
            nuevoEvento.setEnabled(false);
            TextNombreEvento.setText("");
            actualizarTabla(NombreEventos);
            return;
            }
            
            String temp = (String)O;
            
             Vector<String> Similares = new Vector<>();
        for (int i = 0; i < NombreEventos.size(); i++) {
            if (Secuencias_cadenas.LongestCommonSubsequence(temp, NombreEventos.elementAt(i)) >= 75.00) {
                Similares.add(NombreEventos.elementAt(i));
            }
        }

        if (!Similares.isEmpty()) {
            String[] S = new String[Similares.size()];
            Similares.copyInto(S);

            String x = (String) JOptionPane.showInputDialog(null, "Existen eventos con nombres similares al del evento que ha escrito. Seleccione uno de ellos o pulse en cancelar si no se ha equivocado.", "Sugerencia", JOptionPane.QUESTION_MESSAGE, null, S, S[0]);

            if (x == null) {
                g.agregar_nombre_evento(temp);
                NombreEventos.add(temp);
                JOptionPane.showMessageDialog(null, "El evento \"" + temp + "\" ha sido agregado satisfactoriamente.", "Mensaje del sistema", JOptionPane.QUESTION_MESSAGE);
            }

            Vector<String> V = new Vector<String>();
            V.add(x);

            actualizarTabla(V);

        } else {
            g.agregar_nombre_evento(temp);
            JOptionPane.showMessageDialog(null, "El evento \"" + temp + "\" ha sido agregado satisfactoriamente", "Mensaje del sistema", JOptionPane.QUESTION_MESSAGE);
            NombreEventos.add(temp);

            Vector<String> V = new Vector<String>();
            V.add(temp);

            actualizarTabla(V);
        }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableEventos = new javax.swing.JTable();
        nombreEvento = new javax.swing.JLabel();
        TextNombreEvento = new javax.swing.JTextField();
        aceptar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        nuevoEvento = new javax.swing.JButton();
        dimensionesComboBox = new javax.swing.JComboBox<>();
        dimensionesL = new javax.swing.JLabel();
        jCalendar1 = new com.toedter.calendar.JCalendar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TableEventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableEventos);

        nombreEvento.setText("Buscar evento por nombre");

        TextNombreEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextNombreEventoMouseClicked(evt);
            }
        });
        TextNombreEvento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextNombreEventoKeyReleased(evt);
            }
        });

        aceptar.setText("Agregar evento en el año seleccionado ");
        aceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aceptarMouseClicked(evt);
            }
        });

        cancelar.setText("Finalizar edición de eventos");
        cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelarMouseClicked(evt);
            }
        });

        nuevoEvento.setText("Crear nuevo evento");
        nuevoEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevoEventoMouseClicked(evt);
            }
        });

        dimensionesL.setText("Dimensiones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(nombreEvento)
                .addGap(18, 18, 18)
                .addComponent(TextNombreEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nuevoEvento)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dimensionesL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dimensionesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aceptar))
                    .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreEvento)
                    .addComponent(TextNombreEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevoEvento))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar)
                    .addComponent(dimensionesL)
                    .addComponent(dimensionesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelar)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextNombreEventoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextNombreEventoKeyReleased

        if (sonNumeros(evt.getKeyChar())) {
            Character caracterEtrada = evt.getKeyChar();
            String reeplazo = TextNombreEvento.getText().replaceAll(caracterEtrada.toString(), "");
            TextNombreEvento.setText(reeplazo);
        }

        String temp = TextNombreEvento.getText();
        if (temp.length() >= 3) {
            Vector<String> Similares = new Vector<>();
            nuevoEvento.setEnabled(true);
            for (int i = 0; i < NombreEventos.size(); i++) {
                if (Secuencias_cadenas.mayor_subcadena(temp, NombreEventos.elementAt(i))) {
                    Similares.add(NombreEventos.elementAt(i));
                }
            }
            actualizarTabla(Similares);
        } else if (temp.length() < 3) {
            nuevoEvento.setEnabled(false);
            actualizarTabla(NombreEventos);
        }
    }//GEN-LAST:event_TextNombreEventoKeyReleased

    private void nuevoEventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevoEventoMouseClicked

        InputDialog inputDialog = new InputDialog(1, "¿Desea agregar el evento?", TextNombreEvento.getText(), "", this);
        inputDialog.setVisible(true);
        this.setEnabled(false);
        
    }//GEN-LAST:event_nuevoEventoMouseClicked

    private void cancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelarMouseClicked
        Gestor_Eventos GE = new Gestor_Eventos();
        GE.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancelarMouseClicked

    private void aceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aceptarMouseClicked

        if (TableEventos.getSelectedColumn() > -1) {
            String nombreEvento = (String) TableEventos.getValueAt(TableEventos.getSelectedRow(), TableEventos.getSelectedColumn());
            int dimension = dimensionesComboBox.getSelectedIndex() + 1;
            Date d = jCalendar1.getDate();
            SimpleDateFormat dt = new SimpleDateFormat("YYY");
            int anno = Integer.parseInt(dt.format(d).toUpperCase());
            if (!g.existeEventoFecha(anno, nombreEvento)) {
                dt = new SimpleDateFormat("MM-dd-YYY");
                String fecha = dt.format(d).toUpperCase();
                Evento evento = new Evento(nombreEvento, dimension, fecha);
                g.agregar_evento(evento);

                TextNombreEvento.setText("");
                actualizarTabla(NombreEventos);
                JOptionPane.showMessageDialog(null, "Se ha agregado con éxito el evento \"" + nombreEvento + "\" en el año: " + anno);
                TableEventos.clearSelection();
                jCalendar1.setEnabled(false);
                dimensionesL.setEnabled(false);
                dimensionesComboBox.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, "El evento \"" + nombreEvento + "\" ya existe en el año " + anno);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No hay ningún evento seleccionado en la tabla de los nombres de evento");
        }

    }//GEN-LAST:event_aceptarMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        Main M = new Main();
        M.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        TableEventos.clearSelection();
        jCalendar1.setEnabled(false);
        dimensionesL.setEnabled(false);
        dimensionesComboBox.setEnabled(false);
    }//GEN-LAST:event_formMouseClicked

    private void TextNombreEventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextNombreEventoMouseClicked
        jCalendar1.setEnabled(false);
        dimensionesL.setEnabled(false);
        dimensionesComboBox.setEnabled(false);
        TableEventos.clearSelection();
    }//GEN-LAST:event_TextNombreEventoMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableEventos;
    private javax.swing.JTextField TextNombreEvento;
    private javax.swing.JButton aceptar;
    private javax.swing.JButton cancelar;
    private javax.swing.JComboBox<String> dimensionesComboBox;
    private javax.swing.JLabel dimensionesL;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nombreEvento;
    private javax.swing.JButton nuevoEvento;
    // End of variables declaration//GEN-END:variables

    private void actualizarTabla(Vector<String> v) {
        DefaultTableModel df = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        ;
        };
        TableEventos = new JTable(df);
        jScrollPane1.setViewportView(TableEventos);
        TableEventos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = TableEventos.rowAtPoint(e.getPoint());

                if (fila > -1) {
                    jCalendar1.setEnabled(true);
                    dimensionesL.setEnabled(true);
                    dimensionesComboBox.setEnabled(true);
                } else {
                    jCalendar1.setEnabled(false);
                    dimensionesL.setEnabled(false);
                    dimensionesComboBox.setEnabled(false);
                }
            }
        });
        df.addColumn("Nombre del Evento");

        Object[] ob = new Object[1];
        for (int i = 0; i < v.size(); i++) {
            ob[0] = v.elementAt(i);
            df.addRow(ob);
        }
    }
}
