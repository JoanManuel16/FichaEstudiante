/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visuales;

import Base_de_Datos.Gestion;
import clases.Brigada;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utiles.Secuencias_cadenas;


public class ICI extends javax.swing.JFrame {

    Brigada brigada;
    Gestion g = new Gestion();
    
    public ICI(Brigada brigada) {
        initComponents();
        
        this.brigada = brigada;
        
        int m = g.obtenerSumaValoresEventos(brigada);
        
        actividadesExtraL.setText(m+"");
        
        actualizarTablaICI();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaICI = new javax.swing.JTable();
        actividadesExtra = new javax.swing.JLabel();
        PA = new javax.swing.JLabel();
        PAT = new javax.swing.JTextField();
        aceptar = new javax.swing.JButton();
        actividadesExtraL = new javax.swing.JLabel();
        relacion = new javax.swing.JLabel();
        relacionL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaICI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaICI);

        actividadesExtra.setText("Valor de las actividades extracurriculares");

        PA.setText("PA");

        PAT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PATKeyReleased(evt);
            }
        });

        aceptar.setText("Aceptar");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        relacion.setText("Relacion academico-extracurricular");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(actividadesExtra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actividadesExtraL, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(relacion)
                        .addGap(18, 18, 18)
                        .addComponent(relacionL, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aceptar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PA)
                                .addGap(18, 18, 18)
                                .addComponent(PAT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(actividadesExtra)
                        .addComponent(relacion)
                        .addComponent(relacionL, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(actividadesExtraL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PA)
                            .addComponent(PAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(aceptar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PATKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PATKeyReleased
        
         Secuencias_cadenas.borrarLetras(evt.getKeyChar(), PAT);
        
    }//GEN-LAST:event_PATKeyReleased

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        
        if(PAT.getText().equals("")){
            JOptionPane.showMessageDialog(null, "error so com");
                    
        }
        else{
        double M = (Integer.parseInt(actividadesExtraL.getText())*100)/(Integer.parseInt(PAT.getText()));
        relacionL.setText(M+"");
        }
        
        actualizarTablaICI();
    }//GEN-LAST:event_aceptarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PA;
    private javax.swing.JTextField PAT;
    private javax.swing.JButton aceptar;
    private javax.swing.JLabel actividadesExtra;
    private javax.swing.JLabel actividadesExtraL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel relacion;
    private javax.swing.JLabel relacionL;
    private javax.swing.JTable tablaICI;
    // End of variables declaration//GEN-END:variables

    private void actualizarTablaICI() {
        
         DefaultTableModel d = new DefaultTableModel();
         Object[] OBJ = new Object[2];
          d.addColumn("Estudiante");
           d.addColumn("Promedio");
           d.addColumn("ICI");
          
           int m = Integer.parseInt(actividadesExtraL.getText());
           double M = Integer.parseInt(relacionL.getText());
           
           
        for(int i = 0; i < brigada.getEstudiantes().size(); i++){
            OBJ[0] = brigada.getEstudiantes().elementAt(i).getNombre_estudiante();
            double promedioi = g.obtenerPromedio(brigada.getEstudiantes().elementAt(i));
            OBJ[1] = promedioi;
            int miTemp = g.obtenerValoresEventosEstudiante(brigada.getEstudiantes().elementAt(i));
            BigDecimal mi = new BigDecimal(miTemp);
            BigDecimal Mi = new BigDecimal(0.0);
            BigDecimal ICIi = new BigDecimal(0.0);
            
            if(promedioi >= 2 && promedioi < 3){
                BigDecimal primer_elemento = new BigDecimal(((64*m)/25));
                BigDecimal segundoElemento = new BigDecimal(Math.pow(1.25, promedioi));
                BigDecimal tercer_elemento = new BigDecimal(4*m);
                Mi = primer_elemento.multiply(segundoElemento);
                Mi = Mi.subtract(tercer_elemento);
            }
            else if(promedioi < 3.5){
                BigDecimal primer_elemento = new BigDecimal((new BigInteger("2251799813685248").multiply(new BigInteger((M-m)+""))).divide(new BigInteger("6832086203604989")));
                BigDecimal segundoElemento = new BigDecimal(Math.pow(1.5, promedioi));
                BigDecimal tercerElemento = new BigDecimal(new BigInteger("194369165990474").multiply(new BigInteger(m+"")).divide(new BigInteger("92014629004781")));
                BigDecimal cuartoElemento = new BigDecimal(new BigInteger("1125899906842624").multiply(new BigInteger(M+"")).divide(new BigInteger("1012160919052591")));
                Mi = primer_elemento.multiply(segundoElemento);
                Mi = Mi.add(tercerElemento);
                Mi = Mi.subtract(cuartoElemento);
            }
            else if(promedioi < 4){
                BigDecimal primer_elemento = new BigDecimal((new BigInteger("140737488355328").multiply(new BigInteger((M-m)+""))).divide(new BigInteger("2638147582215219")));
                BigDecimal segundoElemento = new BigDecimal(Math.pow(2, promedioi));
                BigDecimal tercerElemento = new BigDecimal(new BigInteger("7141747209585715").multiply(new BigInteger(m+"")).divide(new BigInteger("5276295164430438")));
                BigDecimal cuartoElemento = new BigDecimal(new BigInteger("1865452045155277").multiply(new BigInteger(M+"")).divide(new BigInteger("5276295164430438")));
                Mi = primer_elemento.multiply(segundoElemento);
                Mi = Mi.add(tercerElemento);
                Mi = Mi.subtract(cuartoElemento);
            }
            else if(promedioi < 4.5){
                BigDecimal primer_elemento = new BigDecimal((new BigInteger("17592186044416").multiply(new BigInteger((M-m)+""))).divide(new BigInteger("1597422252574269")));
                BigDecimal segundoElemento = new BigDecimal(Math.pow(2.5, promedioi));
                BigDecimal tercerElemento = new BigDecimal(new BigInteger("223032717854269").multiply(new BigInteger(M+"")).divide(new BigInteger("3194844505148538")));
                BigDecimal cuartoElemento = new BigDecimal(new BigInteger("2971811787294269").multiply(new BigInteger(m+"")).divide(new BigInteger("3194844505148538")));
                Mi = primer_elemento.multiply(segundoElemento);
                Mi = Mi.add(tercerElemento);
                Mi = Mi.add(cuartoElemento);
            }
            else if(promedioi < 5){
                BigDecimal primer_elemento = new BigDecimal((new BigInteger("17592186044416").multiply(new BigInteger((M-m)+""))).divide(new BigInteger("7227143380549369")));
                BigDecimal segundoElemento = new BigDecimal(Math.pow(3, promedioi));
                BigDecimal tercerElemento = new BigDecimal(new BigInteger("388772631671609").multiply(new BigInteger(M+"")).divide(new BigInteger("951722585092921")));
                BigDecimal cuartoElemento = new BigDecimal(new BigInteger("562949953421312").multiply(new BigInteger(m+"")).divide(new BigInteger("951722585092921")));
                Mi = primer_elemento.multiply(segundoElemento);
                Mi = Mi.add(tercerElemento);
                Mi = Mi.add(cuartoElemento);
            }
            
            if(promedioi >= 3 && promedioi <= 5){
            ICIi = mi.add(Mi);
            ICIi = ICIi.divide(new BigDecimal(m+M));
            ICIi = ICIi.multiply(new BigDecimal(100));
            }
            else{
            ICIi = mi.add(Mi);
            ICIi = ICIi.divide(new BigDecimal(2*m));
            }
            OBJ[2] = ICIi;
            d.addRow(OBJ);
            //agregar mi a a la tabla
        }
        
    }
}
